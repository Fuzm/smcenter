package com.irdstudio.smcenter.core.assembly.plugin.check;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import java.util.List;/** * 数据表操作类-[表名: 01.数据检查配置表(urps.plugin_check_conf)] * 通过JDBC实现基本的数据表操作(CRUD)  * @author 代码自动生成 * @version 1.0 * @date 2013-10-25 */public class PluginCheckConfDao {	/* 连接对象 */	Connection conn = null;		public PluginCheckConfDao(Connection conn){		this.conn = conn;	}	/**	 * 根据主键查询单条记录	 * @param 	 * @return	 * @throws SQLException	 */	public PluginCheckConf queryPluginCheckConfWithKeys(String pluginConfId,int confSort)			throws SQLException {		PluginCheckConf dc = null;		PreparedStatement ps = null;		ResultSet rs = null;		try {			ps = conn					.prepareStatement("SELECT * FROM urps.plugin_check_conf WHERE plugin_conf_id=?,conf_sort=? with ur");			ps.setString(1,pluginConfId);			ps.setInt(2,confSort);			rs = ps.executeQuery();			if (rs.next()) {				dc = new PluginCheckConf();				dc.setPluginConfId(rs.getString("plugin_conf_id"));				dc.setConfSort(rs.getInt("conf_sort"));				dc.setCheckItemName(rs.getString("check_item_name"));				dc.setCheckItemSql(rs.getString("check_item_sql"));				dc.setCheckSucCondition(rs.getString("check_suc_condition"));				dc.setCheckErrDesc(rs.getString("check_err_desc"));				dc.setCheckFaildDeal(rs.getString("check_faild_deal"));				dc.setValidDate(rs.getString("valid_date"));				dc.setInvalidDate(rs.getString("invalid_date"));				dc.setLastModifyDate(rs.getString("last_modify_date"));			}		} catch (SQLException e) {			throw new SQLException("queryPluginCheckConfWithKeys is Wrong!"					+ e.getMessage());		} finally {			close(rs, null, ps);		}		return dc;	}	/**	 * 根据查询条件查询多条或单条记录	 * @param szCondition 	 * @return	 * @throws SQLException	 */	public List<PluginCheckConf> queryPluginCheckConfWithCond(String szCondition,String szOrderBy)			throws SQLException {		List<PluginCheckConf> dcList = new ArrayList<PluginCheckConf>();		PreparedStatement ps = null;		ResultSet rs = null;		try {			ps = conn.prepareStatement("SELECT * FROM urps.plugin_check_conf "					+ szCondition + " " + szOrderBy + " with ur");			rs = ps.executeQuery();			while (rs.next()) {				PluginCheckConf dc = new PluginCheckConf();				dc.setPluginConfId(rs.getString("plugin_conf_id"));				dc.setConfSort(rs.getInt("conf_sort"));				dc.setCheckItemName(rs.getString("check_item_name"));				dc.setCheckItemSql(rs.getString("check_item_sql"));				dc.setCheckSucCondition(rs.getString("check_suc_condition"));				dc.setCheckErrDesc(rs.getString("check_err_desc"));				dc.setCheckFaildDeal(rs.getString("check_faild_deal"));				dc.setValidDate(rs.getString("valid_date"));				dc.setInvalidDate(rs.getString("invalid_date"));				dc.setLastModifyDate(rs.getString("last_modify_date"));				dcList.add(dc);			}		} catch (SQLException e) {			throw new SQLException("queryPluginCheckConfWithCond is Wrong!"					+ e.getMessage());		} finally {			close(rs, null, ps);		}		return dcList;	}	/**	 * 关闭资源	 * @param theRs	 * @param theStmt	 * @param thePs	 */	protected void close(ResultSet theRs, Statement theStmt,			PreparedStatement thePs) {		try {			if (theRs != null)				theRs.close();			if (theStmt != null)				theStmt.close();			if (thePs != null)				thePs.close();		} catch (SQLException e) {			e.printStackTrace();		}	}}