package com.irdstudio.smcenter.core.batch.dao;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import java.util.List;/** * 数据表操作类-[表名: 02.批次任务历史(bat_inst_task_h)] * 通过JDBC实现基本的数据表操作(CRUD)  * @author 代码自动生成 * @version 1.0 * @date 2014-05-10 */public class BatInstTaskHDao {	/* 连接对象 */	Connection conn = null;		public BatInstTaskHDao(Connection conn){		this.conn = conn;	}	/**	 * 根据主键查询单条记录	 * @param 	 * @return	 * @throws SQLException	 */	public BatInstTaskH queryWithKeys(String taskId,String batchSerialNo)			throws SQLException {		BatInstTaskH dc = null;		PreparedStatement ps = null;		ResultSet rs = null;		try {			ps = conn					.prepareStatement("SELECT * FROM bat_inst_task_h WHERE task_id=? and batch_serial_no=?");			ps.setString(1,taskId);			ps.setString(2,batchSerialNo);			rs = ps.executeQuery();			if (rs.next()) {				dc = new BatInstTaskH();				dc.setBatchId(rs.getString("batch_id"));				dc.setBatchOrder(rs.getInt("batch_order"));				dc.setTaskId(rs.getString("task_id"));				dc.setBatchDate(rs.getString("batch_date"));				dc.setTaskName(rs.getString("task_name"));				dc.setStageId(rs.getString("stage_id"));				dc.setStageName(rs.getString("stage_name"));				dc.setTaskRunState(rs.getString("task_run_state"));				dc.setTaskInterveneState(rs.getString("task_intervene_state"));				dc.setStartTime(rs.getString("start_time"));				dc.setEndTime(rs.getString("end_time"));				dc.setCostTime(rs.getBigDecimal("cost_time"));				dc.setWarnCount(rs.getInt("warn_count"));				dc.setOther(rs.getString("other"));				dc.setBatchSerialNo(rs.getString("batch_serial_no"));				dc.setStateDesc(rs.getString("state_desc"));			}		} catch (SQLException e) {			throw new SQLException("queryBatInstTaskHWithKeys is Wrong!"					+ e.getMessage());		} finally {			close(rs, null, ps);		}		return dc;	}	/**	 * 根据查询条件查询多条或单条记录	 * @param szCondition 	 * @return	 * @throws SQLException	 */	public List<BatInstTaskH> queryWithCond(String szCondition,String szOrderBy)			throws SQLException {		List<BatInstTaskH> dcList = new ArrayList<BatInstTaskH>();		PreparedStatement ps = null;		ResultSet rs = null;		try {			ps = conn.prepareStatement("SELECT * FROM bat_inst_task_h "					+ szCondition + " " + szOrderBy);			rs = ps.executeQuery();			while (rs.next()) {				BatInstTaskH dc = new BatInstTaskH();				dc.setBatchId(rs.getString("batch_id"));				dc.setBatchOrder(rs.getInt("batch_order"));				dc.setTaskId(rs.getString("task_id"));				dc.setBatchDate(rs.getString("batch_date"));				dc.setTaskName(rs.getString("task_name"));				dc.setStageId(rs.getString("stage_id"));				dc.setStageName(rs.getString("stage_name"));				dc.setTaskRunState(rs.getString("task_run_state"));				dc.setTaskInterveneState(rs.getString("task_intervene_state"));				dc.setStartTime(rs.getString("start_time"));				dc.setEndTime(rs.getString("end_time"));				dc.setCostTime(rs.getBigDecimal("cost_time"));				dc.setWarnCount(rs.getInt("warn_count"));				dc.setOther(rs.getString("other"));				dc.setBatchSerialNo(rs.getString("batch_serial_no"));				dc.setStateDesc(rs.getString("state_desc"));				dcList.add(dc);			}		} catch (SQLException e) {			throw new SQLException("queryBatInstTaskHWithCond is Wrong!"					+ e.getMessage());		} finally {			close(rs, null, ps);		}		return dcList;	}	/**	 * 关闭资源	 * @param theRs	 * @param theStmt	 * @param thePs	 */	protected void close(ResultSet theRs, Statement theStmt,			PreparedStatement thePs) {		try {			if (theRs != null)				theRs.close();			if (theStmt != null)				theStmt.close();			if (thePs != null)				thePs.close();		} catch (SQLException e) {			e.printStackTrace();		}	}}