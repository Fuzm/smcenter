package com.irdstudio.smcenter.core.assembly.socket.client.corba;

/**
* EasyIDLPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from EasyEai.idl
* Monday, March 15, 2004 8:32:43 PM CST
*/

public abstract class EasyIDLPOA extends org.omg.PortableServer.Servant
 implements EasyIDLOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("commit", new java.lang.Integer (0));
    _methods.put ("openFile", new java.lang.Integer (1));
    _methods.put ("readFile", new java.lang.Integer (2));
    _methods.put ("writeFile", new java.lang.Integer (3));
    _methods.put ("closeFile", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // EasyIDL/commit
       {
         byte msg[] = block_tHelper.read (in);
         CallBack cb = CallBackHelper.read (in);
         int $result = (int)0;
         $result = this.commit (msg, cb);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 1:  // EasyIDL/openFile
       {
         String filename = in.read_string ();
         int mode = in.read_long ();
         int $result = (int)0;
         $result = this.openFile (filename, mode);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 2:  // EasyIDL/readFile
       {
         int fd = in.read_long ();
         block_tHolder buf = new block_tHolder ();
         int $result = (int)0;
         $result = this.readFile (fd, buf);
         out = $rh.createReply();
         out.write_long ($result);
         block_tHelper.write (out, buf.value);
         break;
       }

       case 3:  // EasyIDL/writeFile
       {
         int fd = in.read_long ();
         byte buf[] = block_tHelper.read (in);
         int $result = (int)0;
         $result = this.writeFile (fd, buf);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 4:  // EasyIDL/closeFile
       {
         int fd = in.read_long ();
         int $result = (int)0;
         $result = this.closeFile (fd);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:EasyIDL:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public EasyIDL _this()
  {
    return EasyIDLHelper.narrow(
    super._this_object());
  }

  public EasyIDL _this(org.omg.CORBA.ORB orb)
  {
    return EasyIDLHelper.narrow(
    super._this_object(orb));
  }


} // class EasyIDLPOA
